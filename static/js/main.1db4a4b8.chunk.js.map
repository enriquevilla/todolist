{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoInput/TodoInput.js","components/TodoButton/TodoButton.js","components/App.js","index.js"],"names":["TodoItem","props","textClass","item","complete","className","last","type","checked","onChange","handleChange","id","htmlFor","text","TodoInput","useState","value","setValue","placeholder","event","target","onKeyDown","key","eventHandler","TodoButton","onClick","handleClick","savedState","JSON","parse","window","localStorage","getItem","finalState","App","todos","setTodos","mydata","setMyData","prevState","map","i","updateData","useCallback","stringify","setItem","length","useEffect","input","document","querySelector","newTodo","Math","random","toString","substr","push","test","scrollLeft","scrollWidth","filter","blur","querySelectorAll","ReactDOM","render","getElementById"],"mappings":"qQA0BeA,G,KAvBE,SAACC,GACd,IAAIC,EAAY,YAEhB,OADAA,GAAaD,EAAME,KAAKC,SAAW,YAAc,GAE7C,yBAAKC,UAAYJ,EAAME,KAAKG,KAAQ,OAAS,MACzC,2BACIC,KAAK,WACLC,QAASP,EAAME,KAAKC,SACpBK,SAAU,kBAAMR,EAAMS,aAAaT,EAAME,KAAKQ,KAC9CA,GAAIV,EAAME,KAAKQ,KAEnB,yBAAKN,UAAU,QACX,2BACIA,UAAWH,EACXU,QAASX,EAAME,KAAKQ,IAEnBV,EAAME,KAAKU,UCUjBC,G,MA1BG,SAACb,GAAW,IAAD,EACCc,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAczB,OACI,2BACIV,KAAMN,EAAMM,KACZW,YAAajB,EAAMiB,YACnBF,MAAOA,EACPP,SAhBR,SAAsBU,GAClBF,EAASE,EAAMC,OAAOJ,QAgBlBK,UAbR,SAAqBF,GACC,UAAdA,EAAMG,KACNL,EAAS,IAEbhB,EAAMsB,aAAaJ,QCDZK,G,MAVI,SAACvB,GAChB,OACI,4BACIwB,QAAS,kBAAMxB,EAAMyB,gBAEpBzB,EAAMY,QCGbc,EAAaC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UACtDC,EAAa,GACC,MAAdN,IACAM,EAAaN,GAGjB,IAgHeO,EAhHH,WAAO,IAAD,EACYnB,mBAASkB,GADrB,mBACPE,EADO,KACAC,EADA,OAEcrB,qBAFd,mBAEPsB,EAFO,KAECC,EAFD,KAKd,SAAS5B,EAAaC,GAClByB,GAAS,SAAAG,GAOL,OANqBA,EAAUC,KAAI,SAAAC,GAI/B,OAHIA,EAAE9B,KAAOA,IACT8B,EAAErC,UAAYqC,EAAErC,UAEbqC,QAuBnB,IAAMC,EAAaC,uBAAY,WAE3B,IAAMhB,EAAaC,KAAKgB,UAAUT,GAClCL,OAAOC,aAAac,QAAQ,QAASlB,GAGrCW,EAAUH,EAAMK,KAAI,SAAAC,GAMhB,OALIA,IAAMN,EAAMA,EAAMW,OAAS,GAC3BL,EAAEnC,MAAO,EAETmC,EAAEnC,MAAO,EAEN,kBAAC,EAAD,CACHgB,IAAKmB,EAAE9B,GACPR,KAAMsC,EACN/B,aAAcA,QAKD,IAAjByB,EAAMW,QACNR,EACI,uBAAGjC,UAAU,eAAb,uCAKT,CAACiC,EAAWH,IAyBf,OALAY,qBAAU,WACNL,MACD,CAACA,IAIA,6BACI,yBAAKrC,UAAU,kBACVgC,GAEL,yBAAKhC,UAAU,mBACX,kBAAC,EAAD,CACIE,KAAK,OACLW,YAAY,sBACZK,aAhChB,SAAqBJ,GACjB,IAAI6B,EAAQC,SAASC,cAAc,4BACnC,GAAkB,UAAd/B,EAAMG,IAAiB,CACvB,IAAM6B,EAAU,CACZxC,GA7EL,IAAMyC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAE,GA8ErC1C,KAAMmC,EAAMhC,MACZZ,UAAU,GAEdgC,GAAS,SAAAG,GAEL,OADAA,EAAUiB,KAAKL,GACRZ,KAEXG,QACO,MAAMe,KAAKtC,EAAMG,OACxB0B,EAAMU,WAAaV,EAAMW,iBAqBzB,yBAAKtD,UAAU,oBACX,kBAAC,EAAD,CACIQ,KAAK,QACLa,YAnFhB,WACIU,GAAS,SAAAG,GAIL,OAHwBA,EAAUqB,QAAO,SAAAnB,GACrC,OAAQA,EAAErC,eAIlB6C,SAASC,cAAc,8BAA8BW,UA8E7C,kBAAC,EAAD,CACIhD,KAAK,YACLa,YA5EhB,WACIU,EAAS,IACTa,SAASa,iBAAiB,8BAA8B,GAAGD,a,MC3CnEE,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,W","file":"static/js/main.1db4a4b8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nconst TodoItem = (props) => {\r\n    let textClass = \"todo-text\";\r\n    textClass += props.item.complete ? \" complete\" : \"\";\r\n    return (\r\n        <div className={(props.item.last) ? \"last\" : null}>\r\n            <input \r\n                type=\"checkbox\" \r\n                checked={props.item.complete}\r\n                onChange={() => props.handleChange(props.item.id)}\r\n                id={props.item.id}\r\n            />\r\n            <div className=\"text\">\r\n                <label \r\n                    className={textClass} \r\n                    htmlFor={props.item.id}\r\n                >\r\n                    {props.item.text}\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","import React, { useState } from \"react\";\r\nimport \"./TodoInput.css\";\r\n\r\nconst TodoInput = (props) => {\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    function handleChange(event) {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    function handleEnter(event) {\r\n        if (event.key === \"Enter\") {\r\n            setValue(\"\");\r\n        }\r\n        props.eventHandler(event);\r\n    }\r\n\r\n    return (\r\n        <input \r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            value={value}\r\n            onChange={handleChange}\r\n            onKeyDown={handleEnter}\r\n        >\r\n        </input>\r\n    )\r\n}\r\n\r\nexport default TodoInput;","import React from \"react\";\r\nimport \"./TodoButton.css\"\r\n\r\nconst TodoButton = (props) => {\r\n    return (\r\n        <button \r\n            onClick={() => props.handleClick()}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TodoButton;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport TodoItem from \"./TodoItem/TodoItem\";\r\nimport TodoInput from \"./TodoInput/TodoInput\";\r\nimport TodoButton from \"./TodoButton/TodoButton\";\r\n\r\n// Random ID generator function\r\nlet ID = () => {\r\n    return \"_\" + Math.random().toString(36).substr(2,9);\r\n};\r\n\r\n// Parse saved list to JSON if exists\r\nconst savedState = JSON.parse(window.localStorage.getItem(\"todos\"));\r\nlet finalState = [];\r\nif (savedState != null) {\r\n    finalState = savedState;\r\n}\r\n\r\nconst App = () => {\r\n    const [todos, setTodos] = useState(finalState);\r\n    const [mydata, setMyData] = useState();\r\n\r\n    // Handle checkbox toggling\r\n    function handleChange(id) {\r\n        setTodos(prevState => {\r\n            const updatedTodos = prevState.map(i => {\r\n                if (i.id === id) {\r\n                    i.complete = !i.complete;\r\n                }\r\n                return i;\r\n            });\r\n            return updatedTodos;\r\n        })\r\n    }\r\n\r\n    // Handle removal of completed items\r\n    function handleClickClean() {\r\n        setTodos(prevState => {\r\n            const todosToComplete = prevState.filter(i => {\r\n                return !i.complete;\r\n            });\r\n            return todosToComplete;\r\n        });\r\n        document.querySelector(\".button-container > button\").blur();\r\n    }\r\n\r\n    // Handle removal of all items\r\n    function handleClickClear() {\r\n        setTodos([]);\r\n        document.querySelectorAll(\".button-container > button\")[1].blur();\r\n    }\r\n\r\n    const updateData = useCallback(() => {\r\n        // Save data to local storage\r\n        const savedState = JSON.stringify(todos);\r\n        window.localStorage.setItem(\"todos\", savedState);\r\n\r\n        // Assign true to last item on list (CSS) and create components\r\n        setMyData(todos.map(i => {\r\n            if (i === todos[todos.length - 1]) {\r\n                i.last = true;\r\n            } else {\r\n                i.last = false;\r\n            }\r\n            return <TodoItem\r\n                key={i.id}\r\n                item={i}\r\n                handleChange={handleChange}\r\n            />\r\n        }));\r\n\r\n        // If no components, this text will be displayed\r\n        if (todos.length === 0) {\r\n            setMyData( \r\n                <p className=\"todos-empty\">\r\n                    To do list empty, add some items\r\n                </p>\r\n            )\r\n        }\r\n    }, [setMyData, todos]);\r\n  \r\n    function handleEnter(event) {\r\n        let input = document.querySelector(\".input-container > input\"); \r\n        if (event.key === \"Enter\") {\r\n            const newTodo = {\r\n                id: ID(),\r\n                text: input.value,\r\n                complete: false\r\n            };\r\n            setTodos(prevState => {\r\n                prevState.push(newTodo);\r\n                return prevState;\r\n            });\r\n            updateData();\r\n        } else if (/[.]/.test(event.key)) {\r\n            input.scrollLeft = input.scrollWidth;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, [updateData])\r\n\r\n    // Render all components\r\n    return (\r\n        <div>\r\n            <div className=\"todo-container\">\r\n                {mydata}\r\n            </div>\r\n            <div className=\"input-container\">\r\n                <TodoInput \r\n                    type=\"text\" \r\n                    placeholder=\"Add item to list...\"\r\n                    eventHandler={handleEnter}\r\n                />\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <TodoButton\r\n                    text=\"Clean\"\r\n                    handleClick={handleClickClean}\r\n                />\r\n                <TodoButton\r\n                    text=\"Clear all\"\r\n                    handleClick={handleClickClear}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}